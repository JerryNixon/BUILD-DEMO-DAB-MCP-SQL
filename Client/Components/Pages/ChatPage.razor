@inject IHttpClientFactory ClientFactory

<h3>Chat</h3>

<div>
    @foreach (var message in messages)
    {
        <p><strong>@message.Role:</strong> @message.Content</p>
    }

    <input @bind="userInput" placeholder="Type a message..." />
    <button @onclick="Send">Send</button>
</div>

@code {
    private string userInput = "";
    private List<Message> messages = new()
    {
        new Message { Role = "system", Content = "You are a helpful assistant." }
    };

    private async Task Send()
    {
        if (string.IsNullOrWhiteSpace(userInput)) return;

        messages.Add(new Message { Role = "user", Content = userInput });

        var request = new
        {
            messages = messages,
            max_tokens = 1000,
            temperature = 0.7,
            frequency_penalty = 0,
            presence_penalty = 0,
            top_p = 1
        };

        var deployment = "gpt-35-turbo"; // Replace with your deployment name
        var version = "2023-05-15"; // Replace with your API version
        var url = $"openai/deployments/{deployment}/chat/completions?api-version={version}";

        try
        {
            var client = ClientFactory.CreateClient("AzureOpenAI");
            var response = await client.PostAsJsonAsync(url, request);

            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadFromJsonAsync<ChatResponse>();
                var reply = json?.Choices.FirstOrDefault()?.Message;

                if (reply is not null)
                {
                    messages.Add(reply);
                }
            }
            else
            {
                messages.Add(new Message { Role = "system", Content = "Error: Unable to process your request." });
            }
        }
        catch (Exception ex)
        {
            messages.Add(new Message { Role = "system", Content = $"Error: {ex.Message}" });
        }

        userInput = "";
    }

    public class Message
    {
        public string Role { get; set; } = "";
        public string Content { get; set; } = "";
    }

    public class ChatResponse
    {
        public List<Choice> Choices { get; set; } = new();

        public class Choice
        {
            public Message Message { get; set; } = new();
        }
    }
}
